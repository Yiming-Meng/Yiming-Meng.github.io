<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Formal Methods | Yiming Meng</title>
    <link>http://localhost:4321/tag/formal-methods/</link>
      <atom:link href="http://localhost:4321/tag/formal-methods/index.xml" rel="self" type="application/rss+xml" />
    <description>Formal Methods</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Wed, 27 Apr 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://localhost:4321/media/icon_hued5b44fe80b908030093a7e09ec67911_44353_512x512_fill_lanczos_center_3.png</url>
      <title>Formal Methods</title>
      <link>http://localhost:4321/tag/formal-methods/</link>
    </image>
    
    <item>
      <title>Formal Methods</title>
      <link>http://localhost:4321/project/formal_methods/</link>
      <pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:4321/project/formal_methods/</guid>
      <description>&lt;h2 id=&#34;abstraction-based-formal-methods-for-stochastic-dynamical-systems&#34;&gt;Abstraction-Based Formal Methods for Stochastic Dynamical Systems&lt;/h2&gt;
&lt;div style=&#34;text-align: justify;&#34;&gt;
   Abstraction-based formal synthesis relies on obtaining a finite-state abstraction (or symbolic model) of the original and possibly nonlinear systems. Computational methods, such as graph-based model checking and automaton-guided controller synthesis, are then developed based on the abstraction to verify the system or synthesize controllers with respect to a temporal logic specification. Abstractions enable autonomous decision-making of physical systems to achieve more complex tasks and have received significant success in the past decade. Regardless of heavy state-space discretization and complicated abstraction analysis, formal methods compute with guarantees a set of initial states from which a controller exists to realize the given specification. So far, abstraction-based formal verification and control synthesis for deterministic systems has gained its maturity. Sound and approximately complete finite (not just finite-state) abstractions can be achieved.
   &lt;/div&gt;
&lt;div style=&#34;height: 10px;&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;text-align: justify;&#34;&gt;
However, to determine the &#34;size&#34; of the abstractions for stochastic systems, we need to work on the weak* topology of the solution processes (here, we treat the solutions as functionals rather than absolute continuous functions). The obtained abstractions based on the state-space discretization are essentially a family of &#34;discrete-version&#34; transition kernels of the original systems. However, there are uncountably infinite of them, which is why we name it a &#34;finite-state&#34; abstraction. To prevent a sound stochastic abstraction from generating significant deviation, we perform a completeness analysis. The purpose is to investigate whether such deviations can be reflected in some continuous-state systems with arbitrarily small perturbations when compared to the original concrete systems. By conducting this type of comparison, we aim to release the abstraction from the &#34;virtual&#34; systems and establish a perception that even small deviations would not lead to substantial issues for the original system.
  &lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
